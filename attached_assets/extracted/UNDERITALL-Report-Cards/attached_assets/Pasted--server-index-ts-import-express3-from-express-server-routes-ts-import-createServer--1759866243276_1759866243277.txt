// server/index.ts
import express3 from "express";

// server/routes.ts
import { createServer } from "http";
import express from "express";
async function registerRoutes(app2) {
  app2.get("/api/orders/:orderNumber", async (req, res) => {
    const orderNumber = req.params.orderNumber;
    const adminToken = process.env.SHOPIFY_ADMIN_TOKEN;
    const shopDomain = process.env.SHOPIFY_SHOP_DOMAIN;
    if (!adminToken || !shopDomain) {
      return res.status(500).json({
        error: "Missing Shopify credentials. Set SHOPIFY_ADMIN_TOKEN and SHOPIFY_SHOP_DOMAIN in Secrets."
      });
    }
    try {
      const query = `
        query getOrder($query: String!) {
          orders(first: 1, query: $query) {
            edges {
              node {
                id
                name
                createdAt
                email
                phone
                lineItems(first: 50) {
                  edges {
                    node {
                      id
                      title
                      quantity
                      sku
                      variantTitle
                      name
                      customAttributes {
                        key
                        value
                      }
                    }
                  }
                }
                shippingAddress {
                  firstName
                  lastName
                  company
                  address1
                  address2
                  city
                  province
                  provinceCode
                  zip
                  country
                  countryCode
                  phone
                  name
                }
                customer {
                  firstName
                  lastName
                  email
                }
              }
            }
          }
        }
      `;
      const response = await fetch(`https://${shopDomain}/admin/api/2024-01/graphql.json`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Shopify-Access-Token": adminToken
        },
        body: JSON.stringify({
          query,
          variables: {
            query: `name:#${orderNumber}`
          }
        })
      });
      const result = await response.json();
      if (result.errors) {
        return res.status(400).json({ error: result.errors });
      }
      const edges = result.data?.orders?.edges;
      if (!edges || edges.length === 0) {
        return res.status(404).json({ error: `Order #${orderNumber} not found` });
      }
      const order = edges[0].node;
      const transformedOrder = {
        id: parseInt(order.id.split("/").pop() || "0"),
        name: order.name,
        order_number: parseInt(orderNumber),
        created_at: order.createdAt,
        email: order.email,
        phone: order.phone,
        line_items: order.lineItems.edges.map((item) => ({
          id: parseInt(item.node.id.split("/").pop() || "0"),
          title: item.node.title,
          quantity: item.node.quantity,
          sku: item.node.sku || "",
          variant_title: item.node.variantTitle,
          name: item.node.name,
          properties: item.node.customAttributes?.map((attr) => ({
            name: attr.key,
            value: attr.value
          })) || []
        })),
        shipping_address: order.shippingAddress ? {
          first_name: order.shippingAddress.firstName,
          last_name: order.shippingAddress.lastName,
          company: order.shippingAddress.company,
          address1: order.shippingAddress.address1,
          address2: order.shippingAddress.address2,
          city: order.shippingAddress.city,
          province: order.shippingAddress.province,
          province_code: order.shippingAddress.provinceCode,
          zip: order.shippingAddress.zip,
          country: order.shippingAddress.country,
          country_code: order.shippingAddress.countryCode,
          phone: order.shippingAddress.phone,
          name: order.shippingAddress.name
        } : null,
        customer: order.customer ? {
          first_name: order.customer.firstName,
          last_name: order.customer.lastName,
          email: order.customer.email
        } : null
      };
      res.json({ order: transformedOrder });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  });
  app2.post("/api/preview-html", express.json({ limit: "10mb" }), (req, res) => {
    const { html } = req.body;
    if (!html) {
      return res.status(400).send("Missing HTML content");
    }
    res.setHeader("Content-Type", "text/html");
    res.send(html);
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express2 from "express";
import fs from "fs";
import path2 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      ),
      await import("@replit/vite-plugin-dev-banner").then(
        (m) => m.devBanner()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  },
  server: {
    fs: {
      strict: true,
      deny: ["**/.*"]
    }
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(import.meta.dirname, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express2.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express3();
app.use(express3.json());
app.use(express3.urlencoded({ extended: false }));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = parseInt(process.env.PORT || "5000", 10);
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();